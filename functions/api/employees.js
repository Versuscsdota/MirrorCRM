import { json, badRequest, forbidden } from '../_utils.js';
import { requireRole, newId, sha256, incUserCount } from '../_utils.js';

// KV key: employee:<id>
// Stored object shape:
// { id, fullName, position, phone?, email? }

function sanitizeStr(v, max = 120) {
  if (v == null) return '';
  return String(v).trim().replace(/[\x00-\x1F\x7F]/g, '').slice(0, max);
}

function isEmail(v){ return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v); }
function isPhone(v){ return /^[+0-9 ()-]{6,}$/.test(v); }

export async function onRequestGet(context) {
  const { env, request } = context;
  // Only admin/root can read list
  const { error } = await requireRole(env, request, ['root','admin']);
  if (error) return error;
  const list = await env.CRM_KV.list({ prefix: 'employee:' });
  const fetched = await Promise.all(list.keys.map(k => env.CRM_KV.get(k.name, { type: 'json' })));
  const items = fetched.filter(Boolean).map(e => ({ id: e.id, fullName: e.fullName, position: e.position }));
  items.sort((a,b)=> (a.fullName||'').localeCompare(b.fullName||''));
  return json(items);
}

export async function onRequestPost(context) {
  const { env, request } = context;
  const { error } = await requireRole(env, request, ['root','admin']);
  if (error) return forbidden('Только администратор и root могут регистрировать новых пользователей');
  let body;
  try { body = await request.json(); } catch { return badRequest('Invalid JSON'); }
  let fullName = sanitizeStr(body.fullName, 160);
  let position = sanitizeStr(body.position, 80);
  let phone = sanitizeStr(body.phone || '', 40);
  let email = sanitizeStr(body.email || '', 120);
  let role = sanitizeStr(body.role || 'interviewer', 20);

  if (!fullName || !position) return badRequest('fullName и position обязательны');
  if (email && !isEmail(email)) return badRequest('Некорректный email');
  if (phone && !isPhone(phone)) return badRequest('Некорректный телефон');
  const allowedRoles = ['interviewer','curator','admin'];
  if (!allowedRoles.includes(role)) role = 'interviewer';

  const id = newId('emp');
  const employee = { id, fullName, position, ...(phone ? { phone } : {}), ...(email ? { email } : {}) };
  await env.CRM_KV.put(`employee:${id}`, JSON.stringify(employee));

  // Create a user account with autogenerated credentials (first login must change)
  function genLogin() {
    const suffix = newId('').slice(0, 6);
    return `emp${suffix}`;
  }
  function genPassword() {
    const alphabet = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz23456789';
    let out = '';
    for (let i = 0; i < 10; i++) out += alphabet[Math.floor(Math.random()*alphabet.length)];
    return out;
  }
  // ensure unique login
  let login;
  for (let i = 0; i < 5; i++) {
    const candidate = genLogin();
    const exists = await env.CRM_KV.get(`user_login:${candidate}`);
    if (!exists) { login = candidate; break; }
  }
  if (!login) login = genLogin() + Date.now().toString(36).slice(-2);
  const password = genPassword();
  const passHash = await sha256(password);
  const userId = newId('usr');
  const user = { id: userId, login, role, fullName, employeeId: id, mustChange: true, createdAt: Date.now() };
  await env.CRM_KV.put(`user:${userId}`, JSON.stringify({ ...user, passHash }));
  await env.CRM_KV.put(`user_login:${login}`, userId);
  await incUserCount(env);

  return json({ ...employee, credentials: { login, password } }, { status: 201 });
}

export async function onRequestDelete(context) {
  const { env, request } = context;
  // Only root can delete employees
  const { error } = await requireRole(env, request, ['root']);
  if (error) return error;
  
  const url = new URL(request.url);
  const id = url.searchParams.get('id');
  if (!id) return badRequest('id required');
  
  const employee = await env.CRM_KV.get(`employee:${id}`, { type: 'json' });
  if (!employee) return json({ error: 'Employee not found' }, { status: 404 });
  
  // Find and delete associated user account
  const userList = await env.CRM_KV.list({ prefix: 'user:' });
  const users = await Promise.all(userList.keys.map(k => env.CRM_KV.get(k.name, { type: 'json' })));
  const associatedUser = users.find(u => u && u.employeeId === id);
  
  if (associatedUser) {
    await env.CRM_KV.delete(`user:${associatedUser.id}`);
    await env.CRM_KV.delete(`user_login:${associatedUser.login}`);
  }
  
  // Delete all schedule events for this employee
  const scheduleList = await env.CRM_KV.list({ prefix: 'schedule:' });
  const schedules = await Promise.all(scheduleList.keys.map(k => env.CRM_KV.get(k.name, { type: 'json' })));
  const employeeEvents = schedules.filter(s => s && s.employeeId === id);
  
  await Promise.all(employeeEvents.map(event => 
    env.CRM_KV.delete(`schedule:${event.id}`)
  ));
  
  // Delete employee
  await env.CRM_KV.delete(`employee:${id}`);
  
  return json({ ok: true });
}
